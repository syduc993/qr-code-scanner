import streamlit as st
import cv2
from pyzbar.pyzbar import decode
import numpy as np
from PIL import Image
import requests

# Ki·ªÉm tra xem pyzbar ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch∆∞a
try:
    from pyzbar.pyzbar import decode
except ImportError:
    st.error("‚ö†Ô∏è Ch∆∞a c√†i ƒë·∫∑t pyzbar. Vui l√≤ng c√†i ƒë·∫∑t theo h∆∞·ªõng d·∫´n b√™n d∆∞·ªõi.")
    st.code("pip install pyzbar")
    st.stop()

def main():
    st.title("üì∑ Qu√©t QR Code ƒë·ªÉ tra c·ª©u th√¥ng tin")
    
    # T·∫°o file uploader cho ph√©p upload ·∫£nh
    uploaded_file = st.file_uploader("T·∫£i l√™n ·∫£nh ch·ª©a m√£ QR", type=['jpg', 'jpeg', 'png'])
    
    # X·ª≠ l√Ω camera
    camera_on = st.checkbox('B·∫≠t Camera')
    
    if camera_on:
        cap = cv2.VideoCapture(0)
        frame_placeholder = st.empty()
        
        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                st.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi camera!")
                break
                
            # Chuy·ªÉn frame th√†nh grayscale
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            
            # Qu√©t QR code
            qr_codes = decode(gray)
            
            # V·∫Ω khung v√† hi·ªÉn th·ªã m√£ QR
            for qr in qr_codes:
                # V·∫Ω ƒë∆∞·ªùng vi·ªÅn
                points = qr.polygon
                if len(points) > 4:
                    hull = cv2.convexHull(np.array([point for point in points], dtype=np.float32))
                    points = hull
                
                points = np.array(points, np.int32)
                points = points.reshape((-1, 1, 2))
                cv2.polylines(frame, [points], True, (0, 255, 0), 3)
                
                # Hi·ªÉn th·ªã d·ªØ li·ªáu
                qr_data = qr.data.decode('utf-8')
                cv2.putText(frame, qr_data, (qr.rect.left, qr.rect.top - 10),
                          cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                
                # L∆∞u k·∫øt qu·∫£
                st.session_state['qr_result'] = qr_data
                cap.release()
                return
            
            # Hi·ªÉn th·ªã frame
            frame_placeholder.image(frame, channels="BGR")
            
        cap.release()

    # X·ª≠ l√Ω ·∫£nh ƒë∆∞·ª£c t·∫£i l√™n
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        image_np = np.array(image)
        
        # Qu√©t QR code t·ª´ ·∫£nh
        qr_codes = decode(image_np)
        
        if qr_codes:
            for qr in qr_codes:
                qr_data = qr.data.decode('utf-8')
                st.session_state['qr_result'] = qr_data
                break
            
            # Hi·ªÉn th·ªã ·∫£nh v·ªõi khung QR
            st.image(image, caption='·∫¢nh ƒë√£ t·∫£i l√™n')
        else:
            st.warning("Kh√¥ng t√¨m th·∫•y m√£ QR trong ·∫£nh!")

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ qu√©t
    if 'qr_result' in st.session_state:
        qr_text = st.session_state['qr_result']
        st.success(f"‚úÖ ƒê√£ qu√©t m√£ QR: {qr_text}")
        
        # G·ªçi API v·ªõi m√£ QR (thay th·∫ø URL API th·∫≠t c·ªßa b·∫°n)
        try:
            API_URL = f"https://your-api.com/search/?qr_code={qr_text}"
            response = requests.get(API_URL)
            
            if response.status_code == 200:
                result = response.json()
                st.write("üîπ K·∫øt qu·∫£ tra c·ª©u:")
                st.json(result)
            else:
                st.error("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu!")
        except requests.RequestException:
            st.error("‚ùå L·ªói k·∫øt n·ªëi API!")

if __name__ == "__main__":
    main()