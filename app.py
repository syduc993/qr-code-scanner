import streamlit as st
import av
import requests
import cv2
from streamlit_webrtc import webrtc_streamer, VideoTransformerBase
from pyzbar.pyzbar import decode

st.title("üì∑ Qu√©t QR Code ƒë·ªÉ tra c·ª©u th√¥ng tin")

# B·ªô x·ª≠ l√Ω video ƒë·ªÉ qu√©t m√£ QR t·ª´ camera
class QRCodeScanner(VideoTransformerBase):
    def transform(self, frame):
        img = frame.to_ndarray(format="bgr24")  # Chuy·ªÉn ƒë·ªïi frame th√†nh ·∫£nh
        qr_codes = decode(img)  # Qu√©t m√£ QR trong ·∫£nh

        for qr in qr_codes:
            x, y, w, h = qr.rect
            qr_text = qr.data.decode("utf-8")  # L·∫•y n·ªôi dung m√£ QR
            
            # V·∫Ω h√¨nh ch·ªØ nh·∫≠t xung quanh m√£ QR
            cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 3)
            cv2.putText(img, qr_text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

            # L∆∞u gi√° tr·ªã QR code v√†o session state
            st.session_state["qr_result"] = qr_text

        return img

# Hi·ªÉn th·ªã camera v√† qu√©t QR
webrtc_streamer(key="qr_scan", video_transformer_factory=QRCodeScanner)

# Hi·ªÉn th·ªã m√£ QR ƒë√£ qu√©t
if "qr_result" in st.session_state:
    qr_text = st.session_state["qr_result"]
    st.success(f"‚úÖ ƒê√£ qu√©t m√£ QR: `{qr_text}`")

    # G·ª≠i API ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ server
    API_URL = f"https://your-api.com/search/?qr_code={qr_text}"
    response = requests.get(API_URL)
    
    if response.status_code == 200:
        result = response.json()
        st.write("üîπ **K·∫øt qu·∫£ tra c·ª©u:**")
        st.json(result)
    else:
        st.error("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu!")

